name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests with coverage
      run: npm run test
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: ./coverage
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Create release package
      run: |
        # Create release directory
        mkdir -p release/lipid-viewer
        
        # Copy build files
        cp -r dist/* release/lipid-viewer/
        
        # Copy important files to release
        cp README.md release/lipid-viewer/ 2>/dev/null || echo "README.md not found"
        cp package.json release/lipid-viewer/
        
        # Create index.html at root for interactive rendering
        cp dist/index.html release/index.html
        
        # Create ZIP package
        cd release
        zip -r lipid-viewer-$(date +%Y%m%d-%H%M%S).zip lipid-viewer/
        zip -r lipid-viewer-latest.zip lipid-viewer/
        
    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: lipid-viewer-release
        path: release/*.zip
        retention-days: 90
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: Lipid Viewer v1.0.${{ github.run_number }}
        body: |
          ## Lipid Viewer Release
          
          ### Features
          - ✅ SMILES string input and validation
          - ✅ 2D/3D visualization toggle
          - ✅ Multiple renderer support (SmilesDrawer, RDKit.js, Kekule.js, 3Dmol.js, Mol*, NGL)
          - ✅ Export functionality (PNG/SVG/GLB)
          - ✅ Interactive controls and keyboard shortcuts
          - ✅ Framework preparation for electrostatic surfaces
          
          ### Coverage
          - ✅ ≥90% test coverage enforced
          - ✅ Comprehensive Jest unit tests
          - ✅ End-to-end Playwright tests
          
          ### Usage
          Download the ZIP file and extract it. Open `index.html` in your browser for interactive molecular visualization.
          
        files: |
          release/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 