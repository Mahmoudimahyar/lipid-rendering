# Production Dockerfile with AutoDock Vina and CUDA support
# Optimized for AWS deployment with scientific computing libraries

FROM nvidia/cuda:12.4-devel-ubuntu22.04

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    DJANGO_SETTINGS_MODULE=core.settings \
    DOCKING_ALLOW_MOCK=False \
    DOCKING_FORCE_REAL=True \
    DOCKING_CUDA_ENABLED=True \
    CUDA_VISIBLE_DEVICES=all \
    DEBUG=False

WORKDIR /app

# Install system dependencies for scientific packages and CUDA
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    libboost-all-dev \
    libopenbabel-dev \
    openbabel \
    swig \
    libeigen3-dev \
    libcairo2-dev \
    pkg-config \
    gcc \
    g++ \
    gfortran \
    libatlas-base-dev \
    liblapack-dev \
    libblas-dev \
    && rm -rf /var/lib/apt/lists/*

# Create python3 symlink
RUN ln -sf /usr/bin/python3 /usr/bin/python

# Install conda for scientific package management (more reliable for complex dependencies)
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh && \
    /opt/conda/bin/conda clean -ya

ENV PATH="/opt/conda/bin:$PATH"

# Install scientific computing packages via conda (more reliable for complex dependencies)
RUN conda install -c conda-forge -c rdkit -y \
    python=3.11 \
    rdkit \
    openmm \
    mdtraj \
    biopython \
    scipy \
    numpy \
    pandas \
    && conda clean -ya

# Install AutoDock Vina for production molecular docking
RUN conda install -c conda-forge -y autodock-vina && conda clean -ya

# Install additional scientific packages via pip
RUN pip install --no-cache-dir prody openbabel-wheel

# Install Python dependencies
COPY server/requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy Django application
COPY server/ /app

# Copy pre-built React frontend
COPY lipid_viewer/dist/ /app/staticfiles/frontend/

# Create directory for static files
RUN mkdir -p /app/staticfiles

# Collect static files
RUN python manage.py collectstatic --noinput

# Create templates directory and copy the correct index.html
RUN mkdir -p /app/templates && \
    cp /app/staticfiles/frontend/index.html /app/templates/

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/api/healthz', timeout=10)" || exit 1

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
