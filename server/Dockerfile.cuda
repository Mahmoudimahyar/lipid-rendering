# Production Dockerfile with AutoDock Vina and CUDA support using micromamba + conda-forge only

# 1) Build frontend (React) with Node in a separate stage
FROM node:18-bullseye AS frontend-build
WORKDIR /frontend
COPY lipid_viewer/ /frontend/
RUN npm ci --no-audit --prefer-offline && npm run build

# 2) Runtime stage with CUDA and scientific stack
FROM nvidia/cuda:12.4.1-runtime-ubuntu22.04

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_NO_CACHE_DIR=1 \
    DJANGO_SETTINGS_MODULE=core.settings \
    DOCKING_ALLOW_MOCK=False \
    DOCKING_FORCE_REAL=True \
    DOCKING_CUDA_ENABLED=True \
    CUDA_VISIBLE_DEVICES=all \
    DEBUG=False

WORKDIR /app

# Install system dependencies minimal + micromamba
RUN apt-get update && apt-get install -y \
    curl bzip2 ca-certificates git build-essential pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install micromamba
ENV MAMBA_ROOT_PREFIX=/opt/conda
RUN curl -L https://micro.mamba.pm/api/micromamba/linux-64/latest \
    | tar -xj -C /usr/local/bin --strip-components=1 bin/micromamba

# Create base env with conda-forge only
RUN micromamba create -y -p /opt/conda -c conda-forge \
    python=3.11 rdkit openbabel meeko openmm mdtraj scipy numpy=1.23.5 pandas prody && \
    micromamba clean -ya

ENV PATH="/opt/conda/bin:$PATH"

### AutoDock Vina CLI installed separately below

# (Optional) Install GNINA binary (CPU/GPU build availability varies)
RUN curl -sSfL -o /usr/local/bin/gnina https://github.com/gnina/gnina/releases/download/v1.0.3/gnina && \
    chmod +x /usr/local/bin/gnina || true

# Install AutoDock Vina CLI via micromamba from bioconda/conda-forge
RUN micromamba install -y -p /opt/conda -c bioconda -c conda-forge autodock-vina && \
    micromamba clean -ya

# Install Python binding for Vina via pip
RUN pip install --no-cache-dir vina

# Install Python dependencies (strip packages provided by conda)
COPY server/requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    sed -i '/^rdkit==/d' requirements.txt && \
    sed -i '/^vina==/d' requirements.txt && \
    sed -i '/^openbabel-wheel==/d' requirements.txt && \
    sed -i '/^openmm==/d' requirements.txt && \
    sed -i '/^mdtraj==/d' requirements.txt && \
    sed -i '/^prody==/d' requirements.txt && \
    sed -i '/^numpy==/d' requirements.txt && \
    sed -i '/^scipy==/d' requirements.txt && \
    sed -i '/^torch==/d' requirements.txt && \
    sed -i '/^torchvision==/d' requirements.txt && \
    pip install --no-cache-dir -r requirements.txt

# Copy Django application
COPY server/ /app

# Copy built React frontend from builder stage
COPY --from=frontend-build /frontend/dist/ /app/staticfiles/frontend/

# Create directory for static files
RUN mkdir -p /app/staticfiles

# Collect static files
RUN python manage.py collectstatic --noinput

# Create templates directory and copy the correct index.html
RUN mkdir -p /app/templates && \
    cp /app/staticfiles/frontend/index.html /app/templates/

# Create non-root user for security
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# Health check (simple curl)
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -fsS http://localhost:8000/api/healthz || exit 1

# Use entrypoint to run migrations then start gunicorn
COPY server/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh
CMD ["/app/entrypoint.sh"]
